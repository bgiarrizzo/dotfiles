#!/usr/bin/env bash

determine_if_codespaces_or_macos_or_linux() {
    if [ -n "$CODESPACES" ] || [ -n "$REMOTE_CONTAINERS" ]; then
        CODESPACE=true
    elif [ "$(uname)" = "Darwin" ]; then
        MACOS=true
    else
        LINUX=true
    fi;
}

determine_dotfiles_dir() {
    # In any case, in codespaces, dotiles are stored in this location
    if [ "$CODESPACE" ]; then
        dotfiles_dir="/workspaces/.codespaces/.persistedshare/dotfiles"
    fi;

    # If Macos Or linux, check where the dotfiles are stored
    if [ "$MACOS" ] || [ "$LINUX" ]; then
        if [ -d "${HOME}/dotfiles" ]; then
            dotfiles_dir="${HOME}/dotfiles"
        else
            dotfiles_dir="${HOME}/code/dotfiles"
        fi;
    fi;
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi;
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

SAVEIFS=$IFS
IFS="$(printf '\n\t')"

function extract {
    if [ -z "$1" ]; then
        # display usage if no parameters given
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz|.zlib|.cso>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    else
        for n in "$@"
        do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                        tar xvf "$n"                            ;;
                    *.lzma)      unlzma ./"$n"                  ;;
                    *.bz2)       bunzip2 ./"$n"                 ;;
                    *.cbr|*.rar) unrar x -ad ./"$n"             ;;
                    *.gz)        gunzip ./"$n"                  ;;
                    *.cbz|*.epub|*.zip) unzip ./"$n"            ;;
                    *.z)         uncompress ./"$n"              ;;
                    *.7z|*.apk|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                        7z x ./"$n"                             ;;
                    *.xz)        unxz ./"$n"                    ;;
                    *.exe)       cabextract ./"$n"              ;;
                    *.cpio)      cpio -id < ./"$n"              ;;
                    *.cba|*.ace) unace x ./"$n"                 ;;
                    *.zpaq)      zpaq x ./"$n"                  ;;
                    *.arc)       arc e ./"$n"                   ;;
                    *.cso)       ciso 0 ./"$n" ./"$n.iso" && \
                        extract "$n.iso" && \rm -f "$n"         ;;
                    *.zlib)      zlib-flate -uncompress < ./"$n" > ./"$n.tmp" && \
                        mv ./"$n.tmp" ./"${n%.*zlib}" && \
                        rm -f "$n"                              ;;
                    *)
                        echo "extract: '$n' - unknown archive method"
                        return 1
                        ;;
                esac
            else
                echo "'$n' - file doesn't exist"
                return 1
            fi;
        done
    fi;
}

IFS=$SAVEIFS
