[user]
    name = Bruno Giarrizzo
    email = b.giarrizzo@cyberlife.sh
	signingkey = 52C3FDDF41F44BE9

[commit]
    # https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = false

[alias]
    undo = reset --soft HEAD^
    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # View the current working tree status using the short format.
    s = status -s
    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules
    # Clone a repository including all submodules.
    c = clone --recursive
    # Commit all changes.
    ca = !git add -A && git commit -av
    # Checkout main or master, and fetch all latest changes.
    comfop = !git checkout master 2> /dev/null || git checkout main && git fetch origin && git pull
    # Get Branches and tags from origin and pull code of current branch
    fop = !git fetch origin && git pull
    # Switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose
    # Get Latest Tag
    latestTag = "!git describe --tags $(git rev-list --tags --max-count=1)"
    # List aliases.
    aliases = config --get-regexp alias
    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD
    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    housekeeping = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    prune = fetch --prune
    # List contributors with number of commits.
    contributors = shortlog --summary --numbered
    # Show the user email for the current repository.
    whoami = config user.email
    # Use conventional commits.
    commitz = cz c

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]
    # Show most recently changed branches first.
    sort = -committerdate

[core]
    # Use custom `.gitignore` and `.gitattributes`.
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space
    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false
    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false
    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[diff]
    # Detect copies as well as renames.
    renames = copies

[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true
    autoSetupRemote = true

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

[init]
    defaultBranch = main

[pull]
    rebase = false

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    
[gpg]
	program = /opt/homebrew/bin/gpg
